type: edu
custom_name: stage2
files:
- name: test/EncryptDecryptTest.java
  visible: false
  text: |
    import encryptdecrypt.Main;
    import org.hyperskill.hstest.v6.stage.BaseStageTest;
    import org.hyperskill.hstest.v6.testcase.CheckResult;
    import org.hyperskill.hstest.v6.testcase.TestCase;

    import java.util.List;


    class Attach {
        String original;
        int shift;
        String output;

        public Attach(String original, int shift, String output) {
            this.original = original;
            this.shift = shift;
            this.output = output;
        }
    }

    public class EncryptDecryptTest extends BaseStageTest<Attach> {
        public EncryptDecryptTest() {
            super(Main.class);
        }

        @Override
        public List<TestCase<Attach>> generate() {
            return List.of(
                new TestCase<Attach>()
                    .setInput("welcome to hyperskill\n5")
                    .setAttach(new Attach(
                        "welcome to hyperskill",
                        5,
                        "bjqhtrj yt mdujwxpnqq")),

                new TestCase<Attach>()
                    .setInput("treasure\n10")
                    .setAttach(new Attach(
                        "treasure",
                        10,
                        "dbokcebo"
                    )),

                new TestCase<Attach>()
                    .setInput("qdvdqvrxqwxrxwpvrxspvxiqgdiqarairpbiqqid\n12")
                    .setAttach(new Attach(
                        "qdvdqvrxqwxrxwpvrxspvxiqgdiqarairpbiqqid",
                        12,
                        "cphpchdjcijdjibhdjebhjucspucmdmudbnuccup"
                    )),

                new TestCase<Attach>()
                    .setInput("y\n10")
                    .setAttach(new Attach(
                        "y",
                        10,
                        "i"
                    ))
            );
        }

        @Override
        public CheckResult check(String reply, Attach attach) {
            String clue = attach.output;
            reply = reply.trim();
            clue = clue.trim();
            boolean isCorrect = reply.equals(clue);
            if (isCorrect) {
                return CheckResult.TRUE;
            }
            if (reply.length() != clue.length()) {
                return CheckResult.FALSE(
                    "You should output a line with length " +
                        clue.length() + ". " + "You output a " +
                        "line with length " + reply.length()
                );
            }
            for (int i = 0; i < clue.length(); i++) {
                if (reply.charAt(i) != clue.charAt(i)) {
                    return CheckResult.FALSE(
                        "Your " + (i+1) + "-th character '" + reply.charAt(i) + "'" +
                            " is incorrect. \n" +
                        "The right one is '" + clue.charAt(i) + "'. \n" +
                            "Key is " + attach.shift
                    );
                }
            }
            return CheckResult.TRUE;
        }
    }
  learner_created: false
- name: src/encryptdecrypt/Main.java
  visible: true
  text: |-
    package encryptdecrypt;
    /*Work on project. Stage 5/6: X-files
    Project: Encryption-Decryption*/
    import java.util.Scanner;
    import java.io.*;

    public class Main {
        public static void main(String[] args) {

            int shift = 0;
            int i = 0;
            String whatToDo = "enc";
            String dataTxt = "";
            String pathToFileIn = "";
            String pathToFileOut = "";

            for (String arg : args) {
                try {
                    switch (arg) {
                        case "-mode":
                            whatToDo = args[i + 1];
                            //System.out.println("whatToDo = " + whatToDo);
                            break;
                        case "-key":
                            shift = Integer.parseInt(args[i + 1]);
                            // System.out.println("shift = " + shift);
                            break;
                        case "-data":
                            dataTxt = args[i + 1];
                            // System.out.println("dataTxt = " + dataTxt);
                            break;
                        case "-in":
                            pathToFileIn = args[i + 1];
                            // System.out.println("pathToFileIn = " + pathToFileIn);
                            break;
                        case "-out":
                            pathToFileOut = args[i + 1];
                            //System.out.println("pathToFileOut = " + pathToFileOut);
                            break;
                        default:
                            //System.out.println("(Unknown operation:) current switch case is: " + arg);
                            break;
                    }
                    i++;
                } catch (Exception e) {
                    System.out.println("Error: " + e);
                    e.printStackTrace();
                }
            }

            if (!dataTxt.isEmpty()) {
                EncryptDecrypt encdec = new EncryptDecrypt(dataTxt, shift, whatToDo, pathToFileOut);
                encdec.chooseMode();
            } else if (!pathToFileIn.isEmpty()) {
                EncryptDecrypt encdec = new EncryptDecrypt(dataTxt, shift, whatToDo, pathToFileIn, pathToFileOut);
                encdec.chooseMode();
            } else {
                EncryptDecrypt encdec = new EncryptDecrypt(dataTxt, shift, whatToDo, pathToFileOut);
                encdec.chooseMode();
            }
        }
    }

    class EncryptDecrypt {
        String toProcess;
        int shift;
        String whatToDo;
        String pathToFileIn = "";
        String pathToFileOut = "";

        EncryptDecrypt(String toProcess, int shift, String whatToDo, String pathToFileOut) {
            //System.out.println("+++ 1st constructor");
            this.toProcess = toProcess;
            this.shift = shift;
            this.whatToDo = whatToDo;
            this.pathToFileOut = pathToFileOut;
        }

        EncryptDecrypt(String toProcess, int shift, String whatToDo, String pathToFileIn, String pathToFileOut) {
            //System.out.println("+++ 2nd constructor");
            this.toProcess = toProcess;
            this.shift = shift;
            this.whatToDo = whatToDo;
            this.pathToFileIn = pathToFileIn;
            this.pathToFileOut = pathToFileOut;
        }

        void chooseMode() {
            if (whatToDo.contains("dec")) {
                if (pathToFileIn.isEmpty()) {
                    getDecryption(toProcess);
                } else {
                    File file = new File(pathToFileIn);
                    try (Scanner scanner = new Scanner(file)) {
                        while (scanner.hasNext()) {
                            getDecryption(scanner.nextLine());
                        }
                    } catch (FileNotFoundException e) {
                        System.out.println("Error: " + e);
                        e.printStackTrace();
                    }
                }
            }     else {
                if (pathToFileIn.isEmpty()) {
                    getEncryption(toProcess);
                } else {
                    File file = new File(pathToFileIn);
                    try (Scanner scanner = new Scanner(file)) {
                        while (scanner.hasNext()) {
                            getEncryption(scanner.nextLine());
                        }
                    } catch (FileNotFoundException e) {
                        System.out.println("Error: " + e);
                        e.printStackTrace();
                    }
                }
            }
        }

        void getEncryption(String toProcess) {
            if (pathToFileOut.isEmpty()) {
                for (char c : toProcess.toCharArray()) {
                    System.out.print((char) (shift + (int) c));
                }
            }     else {
                try (FileWriter fileWriter = new FileWriter(pathToFileOut, true); //Set true for append mode
                     PrintWriter printWriter = new PrintWriter(fileWriter)) {
                    for (char c : toProcess.toCharArray()) {
                        printWriter.print((char) (shift + (int) c));
                    }
                    printWriter.println();
                } catch (IOException e) {
                    System.out.println("Error: " + e);
                    e.printStackTrace();
                }
            }
        }

        void getDecryption(String toProcess) {
            if (pathToFileOut.isEmpty()) {
                for (char c : toProcess.toCharArray()) {
                    System.out.print((char) ((int) c - shift));
                }
            }   else {
                try (FileWriter fileWriter = new FileWriter(pathToFileOut, true); //Set true for append mode
                     PrintWriter printWriter = new PrintWriter(fileWriter)) {
                    for (char c : toProcess.toCharArray()) {
                        printWriter.print((char) ((int) c - shift));
                    }
                    printWriter.println();
                } catch (Exception e) {
                    System.out.println("Error: " + e);
                    e.printStackTrace();
                }
            }
        }
    }
  learner_created: false
feedback_link: https://hyperskill.org/projects/46/stages/246/implement
status: Solved
record: 3
